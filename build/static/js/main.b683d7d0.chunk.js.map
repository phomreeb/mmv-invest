{"version":3,"sources":["ColorModeSwitcher.js","App.js","reportWebVitals.js","serviceWorker.js","index.js"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","App","web3ReadData","Web3","web3Metamask","window","ethereum","MMVContract","eth","Contract","MMVABI","ContractAddress","MMVNFT","KKUBContract","KKUBABI","kkub","LUMIContract","LUMIABI","lumi","MMVMetamaskContract","state","account","kub","flowerPrice","gemstonePrice","allnft","amountnft","idModelOpen","transferTokenId","transferTokenName","transferTokenImage","transferTokenTraitType","transferTokenValue","transferTo","a","console","log","request","method","accounts","this","setState","getBalance","balanceKUB","methods","balanceOf","call","balanceKKUB","balanceLUMI","totalnft","parseFloat","utils","fromWei","toFixed","loadNFT","alert","address","result","tokenOfOwnerAll","listnft","list","tokenId","tokenURI","url","fetch","then","response","json","data","attributes","value","ch","length","push","detail","name","image","transferFrom","send","from","tranfer","closeTransfer","theme","textAlign","bg","w","p","m","borderRadius","justifySelf","spacing","boxShadow","rounded","columns","sm","md","map","i","h","src","alt","colorScheme","e","openTransfer","isCentered","closeOnOverlayClick","isOpen","onClose","pb","placeholder","onChange","target","disabled","transferNFT","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.b683d7d0.chunk.js","sourcesContent":["import React from 'react';\nimport { useColorMode, useColorModeValue, IconButton } from '@chakra-ui/react';\nimport { FaMoon, FaSun } from 'react-icons/fa';\n\nexport const ColorModeSwitcher = props => {\n  const { toggleColorMode } = useColorMode();\n  const text = useColorModeValue('dark', 'light');\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun);\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      aria-label={`Switch to ${text} mode`}\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      {...props}\n    />\n  );\n};\n","import React, { Component } from 'react'\nimport {\n  ChakraProvider,\n  Box,\n  VStack,\n  Grid,\n  theme,\n  Tag,\n  HStack,\n  // StackDivider,\n  Stat,\n  StatLabel,\n  StatNumber,\n  StatHelpText,\n  SimpleGrid,\n  Image,\n  Text,\n  Button,\n  Modal,\n  ModalContent,\n  ModalHeader,\n  // ModalCloseButton,\n  ModalBody,\n  ModalFooter,\n  Input,\n} from '@chakra-ui/react';\nimport { ColorModeSwitcher } from './ColorModeSwitcher';\nimport Web3 from 'web3'\nimport ContractAddress from './abi/addressContract.json'\nimport MMVABI from './abi/mmv.json'\nimport KKUBABI from './abi/kkub.json'\nimport LUMIABI from './abi/lumi.json'\n\n\nexport default class App extends Component {\n\n  web3ReadData = new Web3('https://rpc.bitkubchain.io')\n  web3Metamask = new Web3(window.ethereum)\n  MMVContract = new this.web3ReadData.eth.Contract(MMVABI, ContractAddress.MMVNFT)\n  KKUBContract = new this.web3ReadData.eth.Contract(KKUBABI, ContractAddress.kkub)\n  LUMIContract = new this.web3ReadData.eth.Contract(LUMIABI, ContractAddress.lumi)\n  MMVMetamaskContract = new this.web3Metamask.eth.Contract(MMVABI, ContractAddress.MMVNFT)\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      account: \"\",\n      kub: 0,\n      kkub: 0,\n      lumi: 0,\n      flowerPrice: 0,\n      gemstonePrice: 0,\n      allnft: [],\n      amountnft: 0,\n      idModelOpen: false,\n      transferTokenId: \"\",\n      transferTokenName: \"\",\n      transferTokenImage: \"\",\n      transferTokenTraitType: \"\",\n      transferTokenValue: \"\",\n      transferTo: \"\"\n\n    }\n\n  }\n\n  async componentDidMount() {\n    if (typeof window.ethereum !== 'undefined') {\n      console.log('MetaMask is installed!');\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' })\n      if (this.state.account !== accounts[0]) {\n        this.setState({ account: accounts[0] })\n      }\n      // console.log('account :', this.state.account)\n\n      const balanceKUB = await this.web3ReadData.eth.getBalance(this.state.account)\n      const balanceKKUB = await this.KKUBContract.methods.balanceOf(this.state.account).call()\n      const balanceLUMI = await this.LUMIContract.methods.balanceOf(this.state.account).call()\n      const totalnft = await this.MMVContract.methods.balanceOf(this.state.account).call()\n      this.setState({\n        kub: parseFloat(this.web3ReadData.utils.fromWei(balanceKUB, 'ether')).toFixed(4),\n        kkub: parseFloat(this.web3ReadData.utils.fromWei(balanceKKUB, 'ether')).toFixed(4),\n        lumi: parseFloat(this.web3ReadData.utils.fromWei(balanceLUMI, 'ether')).toFixed(4),\n        amountnft: totalnft\n      })\n      // console.log(parseFloat(this.web3ReadData.utils.fromWei(balanceKKUB, 'ether')).toFixed(4), 'KKUB')\n      await this.loadNFT(this.state.account)\n      console.log(this.state.allnft)\n    } else {\n      alert('Please install Metamask')\n    }\n  }\n\n  async loadNFT(address) {\n    this.setState({allnft: []})\n    console.log('load nft data')\n    var result = {\n      \"flower\": 0,\n      \"gemstone\": 0\n    }\n    let listnft = await this.MMVContract.methods.tokenOfOwnerAll(address).call()\n    let list = []\n    for (let tokenId of listnft) {\n      let url = await this.MMVContract.methods.tokenURI(tokenId).call()\n      await fetch(url)\n        .then(response => response.json())\n        .then(data => {\n          data['tokenId'] = tokenId\n          if (data.attributes[1].value === 'Flower') {\n            result['flower'] = result['flower'] + (data.attributes[4].value/100)\n            // this.setState({flowerPrice: this.state.flowerPrice + (data.attributes[4].value/100)})\n          }\n          if (data.attributes[1].value === 'Gemstone') {\n            let ch = data.attributes.length\n            result['gemstone'] = result['gemstone'] + (data.attributes[ch-1].value/100)\n            // this.setState({gemstonePrice: this.state.gemstonePrice + (data.attributes[ch-1].value/100)})\n          }\n          list.push(data)\n          this.setState({allnft: list})\n        }\n      )\n      // console.log(result['flower'],result['gemstone'])\n      // console.log(this.state.allnft.length)\n    }\n\n    this.setState({\n      flowerPrice: parseFloat(result['flower']).toFixed(4),\n      gemstonePrice: parseFloat(result['gemstone']).toFixed(4)\n    })\n  }\n\n  async openTransfer(detail) {\n    // console.log(detail)\n    await this.setState({\n      idModelOpen: true,\n      transferTokenName: detail.name,\n      transferTokenId: detail.tokenId,\n      transferTokenImage: detail.image,\n      transferTokenTraitType: detail.attributes[detail.attributes.length-1]['trait_type'],\n      transferTokenValue: detail.attributes[detail.attributes.length-1]['value']\n    })\n  }\n\n  closeTransfer() {\n    this.setState({idModelOpen: false})\n  }\n\n  async transferNFT() {\n    console.log(this.state.transferTo)\n    if (this.state.transferTo !== this.state.account) {\n      console.log(\"send nft\")\n      let tranfer = await this.MMVMetamaskContract.methods\n        .transferFrom(this.state.account, this.state.transferTo, this.state.transferTokenId)\n        .send({from: this.state.account})\n      const totalnft = await this.MMVContract.methods.balanceOf(this.state.account).call()\n      this.setState({amountnft: totalnft})\n      console.log(tranfer)\n      this.closeTransfer()\n    } else {\n      alert(\"Don't send NFT to your address!\")\n    }\n  }\n\n  render() {\n    return (\n      <ChakraProvider theme={theme}>\n        <Box textAlign=\"right\" bg=\"teal\" w=\"100%\" p={2}>\n          <Tag m={1} size=\"lg\" borderRadius=\"full\">{this.state.account}</Tag>\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n        </Box>\n        <Box textAlign=\"center\" fontSize=\"xl\">\n          <Grid p={3}>\n            <VStack spacing={8}>\n              <HStack spacing=\"24px\">\n                <Box w='200px' boxShadow=\"dark-lg\" p=\"2\" rounded=\"md\">\n                  <Stat>\n                    <StatLabel>KUB</StatLabel>\n                    <StatNumber>{parseFloat(this.state.kub)+parseFloat(this.state.kkub)}</StatNumber>\n                    <StatHelpText>\n                      Coming soon\n                    </StatHelpText>\n                  </Stat>\n                </Box>\n                <Box w='200px' boxShadow=\"dark-lg\" p=\"2\" rounded=\"md\">\n                  <Stat>\n                    <StatLabel>LUMI</StatLabel>\n                    <StatNumber>{this.state.lumi}</StatNumber>\n                    <StatHelpText>\n                      Coming soon\n                    </StatHelpText>\n                  </Stat>\n                </Box>\n                <Box w='200px' boxShadow=\"dark-lg\" p=\"2\" rounded=\"md\">\n                  <Stat>\n                    <StatLabel>Flower</StatLabel>\n                    <StatNumber>{this.state.flowerPrice}</StatNumber>\n                    <StatHelpText>\n                      Coming soon\n                    </StatHelpText>\n                  </Stat>\n                </Box>\n                <Box w='200px' boxShadow=\"dark-lg\" p=\"2\" rounded=\"md\">\n                  <Stat>\n                    <StatLabel>Gemstone</StatLabel>\n                    <StatNumber>{this.state.gemstonePrice}</StatNumber>\n                    <StatHelpText>\n                      Coming soon\n                    </StatHelpText>\n                  </Stat>\n                </Box>\n              </HStack>\n              <Text fontSize=\"md\">Your NFT : {this.state.allnft.length}/{this.state.amountnft}</Text>\n              <SimpleGrid\n                w=\"1080px\"\n                columns={{ sm: 2, md: 4 }}\n                spacing=\"8\"\n                p=\"10\"\n                textAlign=\"center\"\n                rounded=\"lg\"\n                color=\"gray.400\"\n              >\n                {\n                  this.state.allnft.map((detail, i) => \n                  <Box textAlign=\"center\" key={i} boxShadow=\"outline\" p=\"6\" rounded=\"md\">\n                    <VStack>\n                      <Image w=\"60px\" h=\"60px\" src={detail.image} alt={detail.name} />\n                      <Text fontSize=\"md\">{detail.name}</Text>\n                      <Text fontSize=\"sm\">{detail.attributes[detail.attributes.length-1]['trait_type']} : {detail.attributes[detail.attributes.length-1]['value']}</Text>\n                      <Button \n                        colorScheme=\"teal\" \n                        variant=\"outline\" \n                        size=\"sm\"\n                        onClick={(e) => {this.openTransfer(detail)}}\n                      >\n                        Transfer\n                      </Button>\n                    </VStack>\n                  </Box>\n                  )\n                }\n              </SimpleGrid>\n\n              <Modal \n                isCentered \n                closeOnOverlayClick={false} \n                isOpen={this.state.idModelOpen} \n                onClose={!this.state.idModelOpen}\n              >\n                {/* <ModalOverlay /> */}\n                <ModalContent>\n                  <ModalHeader>Transfer your NFT</ModalHeader>\n                  <ModalBody pb={6}>\n                    <VStack>\n                      <Image w=\"80px\" h=\"80px\" src={this.state.transferTokenImage} alt={this.state.transferTokenName} />\n                      <Text fontSize=\"md\">{this.state.transferTokenName}</Text>\n                      <Text fontSize=\"md\">{this.state.transferTokenTraitType} : {this.state.transferTokenValue}</Text>\n                      <Input \n                        placeholder=\"To address\" \n                        size=\"sm\"\n                        onChange={(e) => this.setState({transferTo: e.target.value})}\n                      />\n                      <Button\n                        colorScheme=\"teal\"\n                        variant=\"outline\"\n                        size=\"sm\"\n                        w=\"200px\"\n                        m={3}\n                        disabled={this.state.transferTo.length!==42}\n                        onClick={(e) => {this.transferNFT()}}\n                      >\n                        Transfer\n                      </Button>\n                    </VStack>\n                  </ModalBody>\n                  <ModalFooter>\n                    <Button onClick={(e) => {this.closeTransfer()}}>Close</Button>\n                  </ModalFooter>\n                </ModalContent>\n              </Modal>\n              {/* <VStack\n                divider={<StackDivider borderColor=\"gray.200\" />}\n                spacing={4}\n                align=\"stretch\"\n              >\n                {\n                  this.state.allnft.map((detail, i) => \n                  <Box key={i} w=\"960px\" h=\"40px\" bg=\"yellow.200\">\n                    1\n                  </Box>\n                  )\n                }\n              </VStack> */}\n              \n            </VStack>\n          </Grid>\n        </Box>\n      </ChakraProvider>\n    )\n  }\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It is the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ColorModeScript } from '@chakra-ui/react';\nimport React, { StrictMode } from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <StrictMode>\n    <ColorModeScript />\n    <App />\n  </StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorker.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}